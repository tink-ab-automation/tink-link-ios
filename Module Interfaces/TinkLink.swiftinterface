// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TinkLink
import Foundation
import Security
import Swift
@_exported import TinkCore
import UIKit
import _Concurrency
@_hasMissingDesignatedInitializers final public class AddCredentialsTask : Swift.Identifiable, TinkCore.Cancellable {
  public enum Status {
    case created(TinkCore.Credentials.ID)
    case authenticating(Swift.String?)
    case updating
  }
  public typealias Error = TinkLink.TinkLinkError
  final public var credentials: TinkCore.Credentials? {
    get
  }
  public struct CompletionPredicate {
    public struct SuccessPredicate : Swift.Equatable, Swift.CustomStringConvertible {
      public var description: Swift.String {
        get
      }
      public static let updating: TinkLink.AddCredentialsTask.CompletionPredicate.SuccessPredicate
      public static let updated: TinkLink.AddCredentialsTask.CompletionPredicate.SuccessPredicate
      public static func == (a: TinkLink.AddCredentialsTask.CompletionPredicate.SuccessPredicate, b: TinkLink.AddCredentialsTask.CompletionPredicate.SuccessPredicate) -> Swift.Bool
    }
    public let successPredicate: TinkLink.AddCredentialsTask.CompletionPredicate.SuccessPredicate
    public let shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool
    public init(successPredicate: TinkLink.AddCredentialsTask.CompletionPredicate.SuccessPredicate, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool)
  }
  final public let completionPredicate: TinkLink.AddCredentialsTask.CompletionPredicate
  final public func cancel()
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
public enum AuthenticationTask {
  case awaitingSupplementalInformation(TinkLink.SupplementInformationTask)
  case awaitingThirdPartyAppAuthentication(TinkLink.ThirdPartyAppAuthenticationTask)
}
public typealias AuthenticationTaskHandler = (_ task: TinkLink.AuthenticationTask) -> Swift.Void
final public class AuthorizationContext {
  public init(tink: TinkCore.Tink = .shared)
  @discardableResult
  final public func _authorize(scopes: [TinkCore.Scope], completion: @escaping (_ result: Swift.Result<TinkCore.AuthorizationCode, Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  @discardableResult
  final public func fetchClientDescription(completion: @escaping (_ result: Swift.Result<TinkCore.ClientDescription, Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  @objc deinit
}
final public class ConsentContext {
  public init(tink: TinkCore.Tink = .shared)
  @discardableResult
  final public func fetchScopeDescriptions(scopes: [TinkCore.Scope], completion: @escaping (Swift.Result<[TinkCore.ScopeDescription], Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  final public func termsAndConditions(for locale: Foundation.Locale = .current) -> Foundation.URL
  final public func privacyPolicy(for locale: Foundation.Locale = .current) -> Foundation.URL
  @objc deinit
}
extension TinkLink.CredentialsContext {
  @available(*, deprecated, renamed: "fetchCredentials(withID:completion:)")
  final public func fetchCredentials(with id: TinkCore.Credentials.ID, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  @available(*, deprecated, message: "use add(forProviderWithName:fields:refreshableItems:completionPredicate:authenticationHandler:progressHandler:completion:) instead")
  final public func add(forProviderWithName providerName: TinkCore.Provider.Name, form: TinkLink.Form, refreshableItems: TinkCore.RefreshableItems = .all, completionPredicate: TinkLink.AddCredentialsTask.CompletionPredicate = .init(successPredicate: .updated, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: true), authenticationHandler: @escaping (_ task: TinkLink.AuthenticationTask) -> Swift.Void, progressHandler: @escaping (_ status: TinkLink.AddCredentialsTask.Status) -> Swift.Void = { _ in }, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkLink.AddCredentialsTask
  @available(*, unavailable, renamed: "add(for:form:refreshableItems:completionPredicate:authenticationHandler:completion:)")
  final public func add(for provider: TinkCore.Provider, form: TinkLink.Form, refreshableItems: TinkCore.RefreshableItems = .all, completionPredicate: TinkLink.AddCredentialsTask.CompletionPredicate = .init(successPredicate: .updated, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: true), progressHandler: @escaping (_ status: TinkLink.AddCredentialsTask.Status) -> Swift.Void, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkLink.AddCredentialsTask
  @available(*, unavailable, renamed: "refresh(_:authenticate:refreshableItems:shouldFailOnThirdPartyAppAuthenticationDownloadRequired:authenticationHandler:completion:)")
  final public func refresh(_ credentials: TinkCore.Credentials, authenticate: Swift.Bool = false, refreshableItems: TinkCore.RefreshableItems = .all, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool = true, progressHandler: @escaping (_ status: TinkLink.RefreshCredentialsTask.Status) -> Swift.Void = { _ in }, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkLink.RefreshCredentialsTask
  @available(*, unavailable, renamed: "update(_:form:shouldFailOnThirdPartyAppAuthenticationDownloadRequired:authenticationHandler:completion:)")
  final public func update(_ credentials: TinkCore.Credentials, form: TinkLink.Form? = nil, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool = true, progressHandler: @escaping (_ status: TinkLink.UpdateCredentialsTask.Status) -> Swift.Void = { _ in }, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkLink.UpdateCredentialsTask
  @available(*, unavailable, renamed: "authenticate(_:shouldFailOnThirdPartyAppAuthenticationDownloadRequired:authenticationHandler:completion:)")
  final public func authenticate(_ credentials: TinkCore.Credentials, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool = true, progressHandler: @escaping (_ status: TinkLink.AuthenticateCredentialsTask.Status) -> Swift.Void = { _ in }, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkLink.AuthenticateCredentialsTask
}
@_hasMissingDesignatedInitializers final public class CredentialsContext {
  convenience public init(tink: TinkCore.Tink = .shared)
  @objc deinit
  @discardableResult
  final public func add(forProviderWithName providerName: TinkCore.Provider.Name, fields: [Swift.String : Swift.String], refreshableItems: TinkCore.RefreshableItems = .all, completionPredicate: TinkLink.AddCredentialsTask.CompletionPredicate = .init(successPredicate: .updated, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: true), authenticationHandler: @escaping (_ task: TinkLink.AuthenticationTask) -> Swift.Void, progressHandler: @escaping (_ status: TinkLink.AddCredentialsTask.Status) -> Swift.Void = { _ in }, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkCore.Cancellable
  @discardableResult
  final public func add(for provider: TinkCore.Provider, form: TinkLink.Form, refreshableItems: TinkCore.RefreshableItems = .all, completionPredicate: TinkLink.AddCredentialsTask.CompletionPredicate = .init(successPredicate: .updated, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: true), authenticationHandler: @escaping (_ task: TinkLink.AuthenticationTask) -> Swift.Void, progressHandler: @escaping (_ status: TinkLink.AddCredentialsTask.Status) -> Swift.Void = { _ in }, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkCore.Cancellable
  @discardableResult
  final public func fetchCredentialsList(completion: @escaping (_ result: Swift.Result<[TinkCore.Credentials], Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  @discardableResult
  final public func fetchCredentials(withID id: TinkCore.Credentials.ID, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  @discardableResult
  final public func refresh(_ credentials: TinkCore.Credentials, authenticate: Swift.Bool = false, refreshableItems: TinkCore.RefreshableItems = .all, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool = true, authenticationHandler: @escaping TinkLink.AuthenticationTaskHandler, progressHandler: @escaping (_ status: TinkLink.RefreshCredentialsTask.Status) -> Swift.Void = { _ in }, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkCore.Cancellable
  @discardableResult
  final public func update(_ credentials: TinkCore.Credentials, form: TinkLink.Form? = nil, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool = true, authenticationHandler: @escaping TinkLink.AuthenticationTaskHandler, progressHandler: @escaping (_ status: TinkLink.UpdateCredentialsTask.Status) -> Swift.Void = { _ in }, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkCore.Cancellable
  @discardableResult
  final public func delete(_ credentials: TinkCore.Credentials, completion: @escaping (_ result: Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  @discardableResult
  final public func authenticate(_ credentials: TinkCore.Credentials, shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool = true, authenticationHandler: @escaping TinkLink.AuthenticationTaskHandler, progressHandler: @escaping (_ status: TinkLink.AuthenticateCredentialsTask.Status) -> Swift.Void = { _ in }, completion: @escaping (_ result: Swift.Result<TinkCore.Credentials, Swift.Error>) -> Swift.Void) -> TinkCore.Cancellable
}
extension Dispatch.DispatchWorkItem : TinkCore.Cancellable {
}
public struct Form {
  public struct Fields : Swift.MutableCollection, Swift.RandomAccessCollection {
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(position: Swift.Int) -> TinkLink.Form.Field {
      get
      set
    }
    public func index(after i: Swift.Int) -> Swift.Int
    public subscript(name fieldName: Swift.String) -> TinkLink.Form.Field? {
      get
      set
    }
    public typealias Element = TinkLink.Form.Field
    public typealias Index = Swift.Int
    public typealias Indices = Swift.Range<TinkLink.Form.Fields.Index>
    public typealias Iterator = Swift.IndexingIterator<TinkLink.Form.Fields>
    public typealias SubSequence = Swift.Slice<TinkLink.Form.Fields>
  }
  public var fields: TinkLink.Form.Fields
  public var areFieldsValid: Swift.Bool {
    get
  }
  public func validateFields() throws
  public struct Field {
    public var text: Swift.String
    public let name: Swift.String
    public let validationRules: TinkLink.Form.Field.ValidationRules
    public var attributes: TinkLink.Form.Field.Attributes {
      get
    }
    public struct ValidationRules {
      public let isOptional: Swift.Bool
      public let maxLength: Swift.Int?
      public let minLength: Swift.Int?
    }
    public struct Attributes {
      public struct InputType : Swift.Equatable, Swift.CustomStringConvertible {
        public var description: Swift.String {
          get
        }
        public static let `default`: TinkLink.Form.Field.Attributes.InputType
        public static let numeric: TinkLink.Form.Field.Attributes.InputType
        public static func picker(_ options: [TinkCore.SelectOption]) -> TinkLink.Form.Field.Attributes.InputType
        public static func == (a: TinkLink.Form.Field.Attributes.InputType, b: TinkLink.Form.Field.Attributes.InputType) -> Swift.Bool
      }
      public let description: Swift.String
      public let placeholder: Swift.String?
      public let helpText: Swift.String?
      public let isSecureTextEntry: Swift.Bool
      public let inputType: TinkLink.Form.Field.Attributes.InputType
      public var isEditable: Swift.Bool {
        get
      }
    }
    public struct ValidationError : Swift.Error, Swift.CustomStringConvertible {
      public struct Code : Swift.Hashable {
        public static let invalid: TinkLink.Form.Field.ValidationError.Code
        public static let maxLengthLimit: TinkLink.Form.Field.ValidationError.Code
        public static let minLengthLimit: TinkLink.Form.Field.ValidationError.Code
        public static let requiredFieldEmptyValue: TinkLink.Form.Field.ValidationError.Code
        public static func ~= (lhs: TinkLink.Form.Field.ValidationError.Code, rhs: Swift.Error) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: TinkLink.Form.Field.ValidationError.Code, b: TinkLink.Form.Field.ValidationError.Code) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public let code: TinkLink.Form.Field.ValidationError.Code
      public var description: Swift.String {
        get
      }
      public static let invalid: TinkLink.Form.Field.ValidationError.Code
      public static let maxLengthLimit: TinkLink.Form.Field.ValidationError.Code
      public static let minLengthLimit: TinkLink.Form.Field.ValidationError.Code
      public static let requiredFieldEmptyValue: TinkLink.Form.Field.ValidationError.Code
      public var fieldName: Swift.String
      public var reason: Swift.String?
      public var minLength: Swift.Int?
      public var maxLength: Swift.Int?
    }
    public var isValid: Swift.Bool {
      get
    }
    public func validate() throws
  }
  public struct ValidationError : Swift.Error {
    public var errors: [TinkLink.Form.Field.ValidationError]
    public subscript(fieldName fieldName: Swift.String) -> TinkLink.Form.Field.ValidationError? {
      get
    }
  }
}
extension TinkLink.Form {
  public init(provider: TinkCore.Provider)
  @available(*, deprecated, message: "Use init(supplementInformationTask:) instead.")
  public init(credentials: TinkCore.Credentials)
  public init(updatingCredentials: TinkCore.Credentials, provider: TinkCore.Provider)
  public init(supplementInformationTask: TinkLink.SupplementInformationTask)
}
extension TinkLink.ProviderContext {
  @available(*, deprecated, renamed: "Filter")
  public typealias Attributes = TinkLink.ProviderContext.Filter
  @available(*, deprecated, renamed: "fetchProviders(filter:completion:)")
  final public func fetchProviders(attributes: TinkLink.ProviderContext.Filter, completion: @escaping (Swift.Result<[TinkCore.Provider], Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
}
@_hasMissingDesignatedInitializers final public class ProviderContext {
  public struct Filter : Swift.Hashable {
    public let capabilities: TinkCore.Provider.Capabilities
    public let kinds: Swift.Set<TinkCore.Provider.Kind>
    public let accessTypes: Swift.Set<TinkCore.Provider.AccessType>
    public init(capabilities: TinkCore.Provider.Capabilities, kinds: Swift.Set<TinkCore.Provider.Kind>, accessTypes: Swift.Set<TinkCore.Provider.AccessType>)
    public static let `default`: TinkLink.ProviderContext.Filter
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TinkLink.ProviderContext.Filter, b: TinkLink.ProviderContext.Filter) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  convenience public init(tink: TinkCore.Tink = .shared)
  @discardableResult
  final public func fetchProviders(filter: TinkLink.ProviderContext.Filter = .default, completion: @escaping (Swift.Result<[TinkCore.Provider], Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  @discardableResult
  final public func fetchProviders(for market: TinkCore.Market, filter: TinkLink.ProviderContext.Filter = .default, completion: @escaping (Swift.Result<[TinkCore.Provider], Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  @discardableResult
  final public func fetchProvider(with name: TinkCore.Provider.Name, completion: @escaping (Swift.Result<TinkCore.Provider, Swift.Error>) -> Swift.Void) -> TinkCore.RetryCancellable?
  @objc deinit
}
public struct ProviderTree {
  public let financialInstitutionGroups: [TinkLink.ProviderTree.FinancialInstitutionGroupNode]
  public init(providers: [TinkCore.Provider])
  public func makeFinancialInstitutions() -> [TinkLink.ProviderTree.FinancialInstitutionNode]
  public struct CredentialsKindNode : Swift.Comparable {
    public static func < (lhs: TinkLink.ProviderTree.CredentialsKindNode, rhs: TinkLink.ProviderTree.CredentialsKindNode) -> Swift.Bool
    public static func == (lhs: TinkLink.ProviderTree.CredentialsKindNode, rhs: TinkLink.ProviderTree.CredentialsKindNode) -> Swift.Bool
    public typealias ID = TinkCore.Identifier<TinkLink.ProviderTree.CredentialsKindNode>
    public var id: TinkLink.ProviderTree.CredentialsKindNode.ID {
      get
    }
    public let provider: TinkCore.Provider
    public var credentialsKind: TinkCore.Credentials.Kind {
      get
    }
    public var displayDescription: Swift.String {
      get
    }
    public var imageURL: Foundation.URL? {
      get
    }
  }
  public enum AccessTypeNode : Swift.Comparable {
    public static func < (lhs: TinkLink.ProviderTree.AccessTypeNode, rhs: TinkLink.ProviderTree.AccessTypeNode) -> Swift.Bool
    public static func == (lhs: TinkLink.ProviderTree.AccessTypeNode, rhs: TinkLink.ProviderTree.AccessTypeNode) -> Swift.Bool
    public typealias ID = TinkCore.Identifier<TinkLink.ProviderTree.AccessTypeNode>
    case provider(TinkCore.Provider)
    case credentialsKinds([TinkLink.ProviderTree.CredentialsKindNode])
    public var id: TinkLink.ProviderTree.AccessTypeNode.ID {
      get
    }
    public var providers: [TinkCore.Provider] {
      get
    }
    public var accessType: TinkCore.Provider.AccessType {
      get
    }
    public var imageURL: Foundation.URL? {
      get
    }
  }
  public enum FinancialServicesNode : Swift.Comparable {
    public static func < (lhs: TinkLink.ProviderTree.FinancialServicesNode, rhs: TinkLink.ProviderTree.FinancialServicesNode) -> Swift.Bool
    public static func == (lhs: TinkLink.ProviderTree.FinancialServicesNode, rhs: TinkLink.ProviderTree.FinancialServicesNode) -> Swift.Bool
    case provider(TinkCore.Provider)
    case credentialsKinds([TinkLink.ProviderTree.CredentialsKindNode])
    case accessTypes([TinkLink.ProviderTree.AccessTypeNode])
    public typealias ID = TinkCore.Identifier<TinkLink.ProviderTree.FinancialServicesNode>
    public var providers: [TinkCore.Provider] {
      get
    }
    public var id: TinkLink.ProviderTree.FinancialServicesNode.ID {
      get
    }
    public var financialServices: [TinkCore.Provider.FinancialService] {
      get
    }
    public var imageURL: Foundation.URL? {
      get
    }
    public var financialInstitution: TinkCore.Provider.FinancialInstitution {
      get
    }
  }
  public enum FinancialInstitutionNode : Swift.Comparable {
    public static func < (lhs: TinkLink.ProviderTree.FinancialInstitutionNode, rhs: TinkLink.ProviderTree.FinancialInstitutionNode) -> Swift.Bool
    public static func == (lhs: TinkLink.ProviderTree.FinancialInstitutionNode, rhs: TinkLink.ProviderTree.FinancialInstitutionNode) -> Swift.Bool
    public typealias ID = TinkCore.Identifier<TinkLink.ProviderTree.FinancialInstitutionNode>
    case provider(TinkCore.Provider)
    case credentialsKinds([TinkLink.ProviderTree.CredentialsKindNode])
    case accessTypes([TinkLink.ProviderTree.AccessTypeNode])
    case financialServices([TinkLink.ProviderTree.FinancialServicesNode])
    public var id: TinkLink.ProviderTree.FinancialInstitutionNode.ID {
      get
    }
    public var providers: [TinkCore.Provider] {
      get
    }
    public var financialInstitution: TinkCore.Provider.FinancialInstitution {
      get
    }
    public var imageURL: Foundation.URL? {
      get
    }
  }
  public enum FinancialInstitutionGroupNode : Swift.Identifiable {
    public typealias ID = TinkCore.Identifier<TinkLink.ProviderTree.FinancialInstitutionGroupNode>
    case provider(TinkCore.Provider)
    case credentialsKinds([TinkLink.ProviderTree.CredentialsKindNode])
    case accessTypes([TinkLink.ProviderTree.AccessTypeNode])
    case financialInstitutions([TinkLink.ProviderTree.FinancialInstitutionNode])
    case financialServices([TinkLink.ProviderTree.FinancialServicesNode])
    public var id: TinkLink.ProviderTree.FinancialInstitutionGroupNode.ID {
      get
    }
    public var providers: [TinkCore.Provider] {
      get
    }
    public var displayName: Swift.String {
      get
    }
    public var isEnabled: Swift.Bool {
      get
    }
    public var imageURL: Foundation.URL? {
      get
    }
  }
}
extension Swift.Array where Element == TinkLink.ProviderTree.FinancialInstitutionGroupNode {
  public func makeFinancialInstitutions() -> [TinkLink.ProviderTree.FinancialInstitutionNode]
}
public typealias AuthenticateCredentialsTask = TinkLink.RefreshCredentialsTask
public typealias UpdateCredentialsTask = TinkLink.RefreshCredentialsTask
@_hasMissingDesignatedInitializers final public class RefreshCredentialsTask : Swift.Identifiable, TinkCore.Cancellable {
  public enum Status {
    case authenticating(Swift.String?)
    case updating
  }
  public typealias Error = TinkLink.TinkLinkError
  final public let shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool
  final public var credentials: TinkCore.Credentials {
    get
  }
  final public func cancel()
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SupplementInformationTask : Swift.Identifiable {
  final public let credentials: TinkCore.Credentials
  final public func submit(_ form: TinkLink.Form)
  final public func cancel()
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ThirdPartyAppAuthenticationTask : Swift.Identifiable {
  public typealias Error = TinkLink.TinkLinkError
  public enum Status {
    case qrImage(UIKit.UIImage)
    case awaitAuthenticationOnAnotherDevice
  }
  public var thirdPartyAppAuthentication: TinkCore.Credentials.ThirdPartyAppAuthentication {
    get
  }
  public var shouldFailOnThirdPartyAppAuthenticationDownloadRequired: Swift.Bool {
    get
  }
  public func handle()
  public func handle(statusHandler: @escaping (_ status: TinkLink.ThirdPartyAppAuthenticationTask.Status) -> Swift.Void)
  public func cancel()
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
extension TinkCore.Tink {
  @available(iOS 9.0, *)
  @available(*, deprecated, message: "Use Tink.open(_:completion:) instead.")
  public func open(_ url: Foundation.URL, completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? = nil) -> Swift.Bool
  @available(iOS 9.0, *)
  public static func open(_ url: Foundation.URL, completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? = nil) -> Swift.Bool
}
public struct TinkLinkConfiguration : TinkCore.Configuration {
  public var clientID: Swift.String
  public var appURI: Foundation.URL?
  public var callbackURI: Foundation.URL?
  public var environment: TinkCore.Tink.Environment
  public var certificateURL: Foundation.URL?
  public init(clientID: Swift.String, appURI: Foundation.URL, callbackURI: Foundation.URL? = nil, environment: TinkCore.Tink.Environment = .production, certificateURL: Foundation.URL? = nil)
}
public struct TinkLinkError : Swift.Error, Swift.CustomStringConvertible {
  public struct Code : Swift.Hashable {
    public static let credentialsAuthenticationFailed: TinkLink.TinkLinkError.Code
    public static let temporaryCredentialsFailure: TinkLink.TinkLinkError.Code
    public static let permanentCredentialsFailure: TinkLink.TinkLinkError.Code
    public static let credentialsAlreadyExists: TinkLink.TinkLinkError.Code
    public static let credentialsDeleted: TinkLink.TinkLinkError.Code
    public static let credentialsSessionExpired: TinkLink.TinkLinkError.Code
    public static let cancelled: TinkLink.TinkLinkError.Code
    public static let transferFailed: TinkLink.TinkLinkError.Code
    public static let notFound: TinkLink.TinkLinkError.Code
    public static let invalidArguments: TinkLink.TinkLinkError.Code
    public static let missingRequiredScope: TinkLink.TinkLinkError.Code
    public static let notAuthenticated: TinkLink.TinkLinkError.Code
    public static let tooManyRequests: TinkLink.TinkLinkError.Code
    public static let unavailableForLegalReasons: TinkLink.TinkLinkError.Code
    public static let internalError: TinkLink.TinkLinkError.Code
    public static let notConnectedToInternet: TinkLink.TinkLinkError.Code
    public static let networkFailure: TinkLink.TinkLinkError.Code
    public static let thirdPartyAppAuthenticationFailed: TinkLink.TinkLinkError.Code
    public static func ~= (lhs: TinkLink.TinkLinkError.Code, rhs: Swift.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TinkLink.TinkLinkError.Code, b: TinkLink.TinkLinkError.Code) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ThirdPartyAppAuthenticationFailureReason : Swift.CustomStringConvertible {
    public struct Code : Swift.Hashable {
      public static let deeplinkURLNotFound: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code
      public static let downloadRequired: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code
      public static let doesNotSupportAuthenticatingOnAnotherDevice: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code
      public static let decodingQRCodeImageFailed: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code, b: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public let code: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code
    public var description: Swift.String {
      get
    }
    public static let deeplinkURLNotFound: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code
    public static let downloadRequired: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code
    public static let doesNotSupportAuthenticatingOnAnotherDevice: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code
    public static let decodingQRCodeImageFailed: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason.Code
    public var downloadTitle: Swift.String?
    public var downloadMessage: Swift.String?
    public var appStoreURL: Foundation.URL?
  }
  public let code: TinkLink.TinkLinkError.Code
  public let message: Swift.String?
  public var thirdPartyAppAuthenticationFailureReason: TinkLink.TinkLinkError.ThirdPartyAppAuthenticationFailureReason?
  public var description: Swift.String {
    get
  }
  public static let credentialsAuthenticationFailed: TinkLink.TinkLinkError.Code
  public static let temporaryCredentialsFailure: TinkLink.TinkLinkError.Code
  public static let permanentCredentialsFailure: TinkLink.TinkLinkError.Code
  public static let credentialsAlreadyExists: TinkLink.TinkLinkError.Code
  public static let credentialsDeleted: TinkLink.TinkLinkError.Code
  public static let credentialsSessionExpired: TinkLink.TinkLinkError.Code
  public static let cancelled: TinkLink.TinkLinkError.Code
  public static let transferFailed: TinkLink.TinkLinkError.Code
  public static let notFound: TinkLink.TinkLinkError.Code
  public static let invalidArguments: TinkLink.TinkLinkError.Code
  public static let missingRequiredScope: TinkLink.TinkLinkError.Code
  public static let notAuthenticated: TinkLink.TinkLinkError.Code
  public static let tooManyRequests: TinkLink.TinkLinkError.Code
  public static let unavailableForLegalReasons: TinkLink.TinkLinkError.Code
  public static let internalError: TinkLink.TinkLinkError.Code
  public static let notConnectedToInternet: TinkLink.TinkLinkError.Code
  public static let networkFailure: TinkLink.TinkLinkError.Code
  public static let thirdPartyAppAuthenticationFailed: TinkLink.TinkLinkError.Code
}
final public class TinkLinkSessionManager : TinkCore.SessionManager {
  public init(tink: TinkCore.Tink = .shared)
  @objc deinit
}
extension TinkCore.Tink {
  public var authorizationContext: TinkLink.AuthorizationContext {
    get
  }
  public var consentContext: TinkLink.ConsentContext {
    get
  }
  public var credentialsContext: TinkLink.CredentialsContext {
    get
  }
  public var providerContext: TinkLink.ProviderContext {
    get
  }
}
extension TinkCore.Tink {
  public func _beginUITask()
  public func _endUITask()
}
