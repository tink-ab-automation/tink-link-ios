// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TinkLinkUI
import CoreGraphics
import Down
import Foundation
import Kingfisher
import Swift
import TinkLink
import UIKit
import WebKit
public enum Appearance {
  public static var provider: TinkLinkUI.AppearanceProviding {
    get
    set
  }
}
public protocol AppearanceProviding {
  var colors: TinkLinkUI.ColorProviding { get set }
  var fonts: TinkLinkUI.FontProviding { get set }
}
public struct AppearanceProvider : TinkLinkUI.AppearanceProviding {
  public var colors: TinkLinkUI.ColorProviding
  public var fonts: TinkLinkUI.FontProviding
  public init(colors: TinkLinkUI.ColorProvider? = nil, fonts: TinkLinkUI.FontProvider? = nil)
}
public struct ColorProvider : TinkLinkUI.ColorProviding {
  public var accentBackground: UIKit.UIColor
  public var button: UIKit.UIColor
  public var buttonLabel: UIKit.UIColor
  public var background: UIKit.UIColor
  public var secondaryBackground: UIKit.UIColor
  @available(*, deprecated, message: "Use background to update elements background")
  public var groupedBackground: UIKit.UIColor
  @available(*, deprecated, message: "Use secondaryBackground to update secondary elements background")
  public var secondaryGroupedBackground: UIKit.UIColor
  public var label: UIKit.UIColor
  public var secondaryLabel: UIKit.UIColor
  public var separator: UIKit.UIColor
  public var accent: UIKit.UIColor
  public var warning: UIKit.UIColor
  public var critical: UIKit.UIColor
  public var navigationBarBackground: UIKit.UIColor?
  public var navigationBarButton: UIKit.UIColor?
  public var navigationBarLabel: UIKit.UIColor?
  public init()
  @available(*, deprecated, message: "Use init(accent:background:secondaryBackground:label:secondaryLabel:separator:warning:critical:) instead.")
  public init(background: UIKit.UIColor, secondaryBackground: UIKit.UIColor, groupedBackground: UIKit.UIColor, secondaryGroupedBackground: UIKit.UIColor, label: UIKit.UIColor, secondaryLabel: UIKit.UIColor, separator: UIKit.UIColor, accent: UIKit.UIColor, warning: UIKit.UIColor, critical: UIKit.UIColor)
  @available(*, deprecated, renamed: "init(accent:accentBackground:background:secondaryBackground:label:secondaryLabel:separator:warning:critical:button:buttonLabel:)")
  public init(accent: UIKit.UIColor, accentBackground: UIKit.UIColor?, background: UIKit.UIColor, secondaryBackground: UIKit.UIColor, label: UIKit.UIColor, secondaryLabel: UIKit.UIColor, separator: UIKit.UIColor, warning: UIKit.UIColor, critical: UIKit.UIColor, button: UIKit.UIColor? = nil, buttonText: UIKit.UIColor? = nil)
  public init(accent: UIKit.UIColor, accentBackground: UIKit.UIColor?, background: UIKit.UIColor, secondaryBackground: UIKit.UIColor, label: UIKit.UIColor, secondaryLabel: UIKit.UIColor, separator: UIKit.UIColor, warning: UIKit.UIColor, critical: UIKit.UIColor, button: UIKit.UIColor? = nil, buttonLabel: UIKit.UIColor? = nil)
}
public protocol ColorProviding {
  var accent: UIKit.UIColor { get set }
  var accentBackground: UIKit.UIColor { get set }
  var background: UIKit.UIColor { get set }
  var label: UIKit.UIColor { get set }
  var secondaryLabel: UIKit.UIColor { get set }
  var separator: UIKit.UIColor { get set }
  var secondaryBackground: UIKit.UIColor { get set }
  var button: UIKit.UIColor { get set }
  var buttonLabel: UIKit.UIColor { get set }
  @available(*, deprecated, message: "Use background to update elements background")
  var groupedBackground: UIKit.UIColor { get set }
  @available(*, deprecated, message: "Use secondaryBackground to update secondary elements background")
  var secondaryGroupedBackground: UIKit.UIColor { get set }
  var warning: UIKit.UIColor { get set }
  var critical: UIKit.UIColor { get set }
  var navigationBarBackground: UIKit.UIColor? { get set }
  var navigationBarButton: UIKit.UIColor? { get set }
  var navigationBarLabel: UIKit.UIColor? { get set }
}
public enum Font {
  case custom(Swift.String)
  case systemDefault
}
extension Font {
  public enum Weight {
    case regular
    case bold
    public static func == (a: TinkLinkUI.Font.Weight, b: TinkLinkUI.Font.Weight) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
public struct FontProvider : TinkLinkUI.FontProviding {
  public var regularFont: TinkLinkUI.Font
  public var boldFont: TinkLinkUI.Font
  public init()
  public init(regularFont: TinkLinkUI.Font, boldFont: TinkLinkUI.Font)
  public func font(for weight: TinkLinkUI.Font.Weight) -> TinkLinkUI.Font
}
public protocol FontProviding {
  func font(for weight: TinkLinkUI.Font.Weight) -> TinkLinkUI.Font
}
extension TinkLinkError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
extension TinkLinkError.ThirdPartyAppAuthenticationFailureReason : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
}
public struct TinkLinkUIError : Swift.Error, Swift.CustomStringConvertible {
  public struct Code : Swift.Hashable {
    public static let userCancelled: TinkLinkUI.TinkLinkUIError.Code
    public static let unableToFetchProviders: TinkLinkUI.TinkLinkUIError.Code
    public static let missingInternetConnection: TinkLinkUI.TinkLinkUIError.Code
    public static let credentialsNotFound: TinkLinkUI.TinkLinkUIError.Code
    public static let providerNotFound: TinkLinkUI.TinkLinkUIError.Code
    public static let unableToOpenThirdPartyApp: TinkLinkUI.TinkLinkUIError.Code
    public static let failedToAddCredentials: TinkLinkUI.TinkLinkUIError.Code
    public static let notAuthenticated: TinkLinkUI.TinkLinkUIError.Code
    public static let internalError: TinkLinkUI.TinkLinkUIError.Code
    public static func ~= (lhs: TinkLinkUI.TinkLinkUIError.Code, rhs: Swift.Error) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TinkLinkUI.TinkLinkUIError.Code, b: TinkLinkUI.TinkLinkUIError.Code) -> Swift.Bool
  }
  public var code: TinkLinkUI.TinkLinkUIError.Code
  public var errorsByCredentialsID: [TinkCore.Credentials.ID : Swift.Error]? {
    get
  }
  public var description: Swift.String {
    get
  }
  public static let userCancelled: TinkLinkUI.TinkLinkUIError.Code
  public static let unableToFetchProviders: TinkLinkUI.TinkLinkUIError.Code
  public static let missingInternetConnection: TinkLinkUI.TinkLinkUIError.Code
  public static let credentialsNotFound: TinkLinkUI.TinkLinkUIError.Code
  public static let providerNotFound: TinkLinkUI.TinkLinkUIError.Code
  public static let unableToOpenThirdPartyApp: TinkLinkUI.TinkLinkUIError.Code
  public static let failedToAddCredentials: TinkLinkUI.TinkLinkUIError.Code
  public static let notAuthenticated: TinkLinkUI.TinkLinkUIError.Code
  public static let internalError: TinkLinkUI.TinkLinkUIError.Code
}
@objc @_hasMissingDesignatedInitializers public class TinkLinkViewController : UIKit.UIViewController {
  public struct PrefillStrategy {
    public static let none: TinkLinkUI.TinkLinkViewController.PrefillStrategy
    public static func username(value: Swift.String, isEditable: Swift.Bool) -> TinkLinkUI.TinkLinkViewController.PrefillStrategy
  }
  public struct ProviderPredicate {
    public static func kinds(_ kinds: Swift.Set<TinkCore.Provider.Kind>) -> TinkLinkUI.TinkLinkViewController.ProviderPredicate
    public static func name(_ name: TinkCore.Provider.Name) -> TinkLinkUI.TinkLinkViewController.ProviderPredicate
  }
  public struct Operation {
    public static func create(providerPredicate: TinkLinkUI.TinkLinkViewController.ProviderPredicate = .kinds(.default)) -> TinkLinkUI.TinkLinkViewController.Operation
    public static func authenticate(credentialsID: TinkCore.Credentials.ID) -> TinkLinkUI.TinkLinkViewController.Operation
    public static func refresh(credentialsID: TinkCore.Credentials.ID, forceAuthenticate: Swift.Bool = false) -> TinkLinkUI.TinkLinkViewController.Operation
    public static func update(credentialsID: TinkCore.Credentials.ID) -> TinkLinkUI.TinkLinkViewController.Operation
  }
  public var errorsByCredentialsID: [TinkCore.Credentials.ID : Swift.Error] {
    get
  }
  public var prefill: TinkLinkUI.TinkLinkViewController.PrefillStrategy
  final public let scopes: [TinkCore.Scope]?
  @available(*, deprecated, message: "Use init(configuration:market:scopes:providerPredicate:completion:) instead.")
  convenience public init(tink: TinkCore.Tink = .shared, market: TinkCore.Market, scopes: [TinkCore.Scope], providerPredicate: TinkLinkUI.TinkLinkViewController.ProviderPredicate = .kinds(.default), completion: @escaping (Swift.Result<(code: TinkCore.AuthorizationCode, credentials: TinkCore.Credentials), TinkLinkUI.TinkLinkUIError>) -> Swift.Void)
  public init(configuration: TinkCore.Configuration, market: TinkCore.Market, scopes: [TinkCore.Scope], providerPredicate: TinkLinkUI.TinkLinkViewController.ProviderPredicate = .kinds(.default), completion: @escaping (Swift.Result<(code: TinkCore.AuthorizationCode, credentials: TinkCore.Credentials), TinkLinkUI.TinkLinkUIError>) -> Swift.Void)
  @available(*, deprecated, message: "Use init(tink:operation:completion:) with a Tink instance that has a user session set.")
  convenience public init(tink: TinkCore.Tink = .shared, userSession: TinkCore.UserSession, operation: TinkLinkUI.TinkLinkViewController.Operation = .create(providerPredicate: .kinds(.default)), completion: @escaping (Swift.Result<TinkCore.Credentials, TinkLinkUI.TinkLinkUIError>) -> Swift.Void)
  public init(tink: TinkCore.Tink = .shared, operation: TinkLinkUI.TinkLinkViewController.Operation = .create(providerPredicate: .kinds(.default)), completion: @escaping (Swift.Result<TinkCore.Credentials, TinkLinkUI.TinkLinkUIError>) -> Swift.Void)
  @available(*, deprecated, message: "Authenticate a tink instance using `authenticateUser(authorizationCode:completion:)` and use init(tink:operation:completion:) instead.")
  convenience public init(tink: TinkCore.Tink = .shared, authorizationCode: TinkCore.AuthorizationCode, operation: TinkLinkUI.TinkLinkViewController.Operation = .create(providerPredicate: .kinds(.default)), completion: @escaping (Swift.Result<TinkCore.Credentials, TinkLinkUI.TinkLinkUIError>) -> Swift.Void)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic public var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public func show(_ vc: UIKit.UIViewController, sender: Any?)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@available(iOS 13.0, *)
extension TinkLinkViewController : UIKit.UIAdaptivePresentationControllerDelegate {
  @objc dynamic public func presentationControllerDidAttemptToDismiss(_ presentationController: UIKit.UIPresentationController)
  @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
  @objc dynamic public func presentationControllerShouldDismiss(_ presentationController: UIKit.UIPresentationController) -> Swift.Bool
}
extension Form.Field.ValidationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension TinkLinkUI.Font.Weight : Swift.Equatable {}
extension TinkLinkUI.Font.Weight : Swift.Hashable {}
